{"version":3,"sources":["logo.svg","utils/format.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Date","prototype","format","fmt","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","S","getMilliseconds","k","test","replace","RegExp","$1","getFullYear","substr","length","formatAmount","s","n","undefined","m","l","parseFloat","toFixed","split","reverse","r","t","i","join","TableList","state","startDate","tableData","setTableData","num","console","warn","arr","date","moment","add","amount","amount2","push","index","setState","diff","this","ceil","duration","asMonths","className","map","item","key","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2932537.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\r\n * @author zhaowenjie\r\n * @email [zhaowenjie666@foxmail.com]\r\n * @create date 2019-12-16 21:46:02\r\n * @modify date 2019-12-16 21:46:02\r\n * @desc [数据格式化]\r\n */\r\n/* 对Date的扩展，将 Date 转化为指定格式的String\r\n * 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，\r\n * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\r\n * 例子:\r\n * (new Date()).format(\"yyyy-MM-dd hh:mm:ss.S\") ==> 2006-07-02 08:09:04.423\r\n * (new Date()).format(\"yyyy-M-d h:m:s.S\")      ==> 2006-7-2 8:9:4.18\r\n */\r\n/* eslint-disable no-extend-native */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-plusplus */\r\nDate.prototype.format = (fmt = \"yyyy-MM-dd\") => {\r\n  const o = {\r\n    \"M+\": this.getMonth() + 1, // 月份\r\n    \"d+\": this.getDate(), // 日\r\n    \"h+\": this.getHours(), // 小时\r\n    \"m+\": this.getMinutes(), // 分\r\n    \"s+\": this.getSeconds(), // 秒\r\n    \"q+\": Math.floor((this.getMonth() + 3) / 3), // 季度\r\n    S: this.getMilliseconds() // 毫秒\r\n  };\r\n  if (/(y+)/.test(fmt))\r\n    fmt = fmt.replace(\r\n      RegExp.$1,\r\n      `${this.getFullYear()}`.substr(4 - RegExp.$1.length)\r\n    );\r\n  for (const k in o) {\r\n    if (new RegExp(`(${k})`).test(fmt))\r\n      fmt = fmt.replace(\r\n        RegExp.$1,\r\n        RegExp.$1.length === 1 ? o[k] : `00${o[k]}`.substr(`${o[k]}`.length)\r\n      );\r\n  }\r\n  return fmt;\r\n};\r\n\r\nconst formatDate = (time, dateType) => {\r\n  time = parseInt(time, 10);\r\n  if (time) {\r\n    return new Date(time).format(dateType);\r\n  }\r\n  return \"- -\";\r\n};\r\n\r\n// 暂无数据格式化 message为数据为空时显示的文本\r\nconst formatEmpty = (val, message) => {\r\n  if (val === null || val === undefined || val === \"\") {\r\n    return message || \"暂无信息\";\r\n  }\r\n  return val;\r\n};\r\n\r\nconst formatNum = val => {\r\n  if (val === null || val === undefined || val === \"\") {\r\n    return \"0\";\r\n  }\r\n  return `${val}`.replace(/(\\d)(?=(?:\\d{3})+$)/g, \"$1,\");\r\n};\r\n\r\n// s 金额  n代表要保留的小数位数\r\nconst formatAmount = (s, n) => {\r\n  if (s === null || s === undefined || s === \"\") {\r\n    return \"- -\";\r\n  }\r\n  const m = n;\r\n  s = s || 0;\r\n  n = n > 0 && n <= 20 ? n : 2;\r\n  s = `${parseFloat(`${s}`.replace(/[^\\d.-]/g, \"\")).toFixed(n)}`;\r\n  const l = s\r\n    .split(\".\")[0]\r\n    .split(\"\")\r\n    .reverse();\r\n  const r = s.split(\".\")[1];\r\n  let t = \"\";\r\n  for (let i = 0; i < l.length; i++) {\r\n    t += l[i] + ((i + 1) % 3 === 0 && i + 1 !== l.length ? \",\" : \"\");\r\n  }\r\n  if (m === 0) {\r\n    return t\r\n      .split(\"\")\r\n      .reverse()\r\n      .join(\"\")\r\n      .replace(/-,/, \"-\");\r\n  }\r\n  return `${t\r\n    .split(\"\")\r\n    .reverse()\r\n    .join(\"\")\r\n    .replace(/-,/, \"-\")}.${r}`;\r\n};\r\nexport { formatDate, formatEmpty, formatNum, formatAmount };\r\n","/**\n * @author zhaowenjie\n * @email [zhaowenjie666@foxmail.com]\n * @create date 2019-12-16 21:06:59\n * @modify date 2019-12-16 21:06:59\n * @desc [description]\n */\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\nimport \"./Table.css\";\nimport { formatAmount } from \"./../utils/format\";\n\nclass TableList extends Component {\n  state = {\n    startDate: \"2017-08-15\",\n    tableData: []\n  };\n  componentDidMount() {\n    // https://www.cnblogs.com/candy-Yao/p/9945306.html\n    // 获取差值\n    let diff = moment().diff(moment(this.state.startDate));\n    // 获取当前期数\n    let index = Math.ceil(moment.duration(diff).asMonths());\n    this.setTableData(index);\n  }\n  setTableData = num => {\n    console.warn(num);\n    let arr = [];\n\n    for (let i = -5; i < 5; i++) {\n      const date = moment()\n        .add(i, \"month\")\n        .format(\"YYYY-MM-15\");\n\n      let amount = 0;\n      if (i < 1) {\n        amount = 6879.15 * (num + i);\n      }\n      const amount2 = 1238200 - amount;\n      arr.push({\n        index: num + i,\n        date,\n        amount,\n        amount2\n      });\n    }\n    this.setState({\n      tableData: arr\n    });\n  };\n  render() {\n    return (\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>期数</th>\n            <th>日期</th>\n            <th>已还金额</th>\n            <th>剩余金额</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.state.tableData.map(item => {\n            return (\n              <tr key={item.index}>\n                <td>{item.index}</td>\n                <td>{item.date}</td>\n                <td>{formatAmount(item.amount)}</td>\n                <td>{formatAmount(item.amount2)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default TableList;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport TableList from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div className=\"title\">\n          您好！今天是 {moment(new Date()).format(\"YYYY-MM-DD\")}\n        </div>\n        <TableList></TableList>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}